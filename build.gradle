/*
 *  Copyright 2016 Markus Helbig
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE'
    }
}

plugins {
    id 'com.github.lkishalmi.gatling' version '0.4.1' apply false
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.github.lkishalmi.gatling'

// === Repository config ===

repositories {
    mavenCentral()
}

// === JAVA configuration ===

//noinspection GroovyUnusedAssignment
sourceCompatibility = JavaVersion.VERSION_1_8
//noinspection GroovyUnusedAssignment
targetCompatibility = JavaVersion.VERSION_1_8

// === Integration Test Configuration ===

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    //noinspection GroovyAccessibility
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    it.mustRunAfter test
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}
check.dependsOn integrationTest

// === JAR ===

jar {
    manifest {
        attributes("Implementation-Title": "Kafka REST Proxy",
                "Implementation-Version": version)
    }
}

// === Sources JAR ===

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// === JavaDoc JAR ===

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    //noinspection GroovyAccessibility
    from javadoc.destinationDir
}

// === Gatling ===

gatling {

}
build.dependsOn gatlingClasses

// === Catch all artifacts ===

artifacts {
    archives sourcesJar
    archives javadocJar
}

// === Dependencies ===

dependencies {
    // Scala
    compile 'org.scala-lang:scala-library:2.11.8'

    //application
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.kafka:spring-kafka:1.1.3.RELEASE'
    compile 'com.google.guava:guava:21.0'
    //devtools
    compile 'org.springframework.boot:spring-boot-devtools'


    //testing
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile ('org.springframework.kafka:spring-kafka-test:1.1.3.RELEASE') {
        exclude module: 'log4j'
    }
}

bootRepackage {
    excludeDevtools = true
}

gatling {
    toolVersion = '2.2.3'
}

// === IDEA configuration ===

idea {
    module {
        scopes.TEST.plus += [configurations.integrationTestCompile, configurations.integrationTestRuntime]
    }
    targetVersion = '16'
}

// === Wrapper generation ===

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-3.3-all.zip'
}
